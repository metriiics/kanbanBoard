import React, { useState, useEffect, useRef } from 'react';
import { Link, useLocation } from 'react-router-dom';
import { createPortal } from 'react-dom';
import {
  useProjects,
  useCreateProject,
  useWorkspace,
  useCreateBoard,
} from '../hooks/h_workspace';
import { useCurrentUser } from '../hooks/h_useCurrentUser';

export default function Sidebar({ isCollapsed, onToggle }) {
  const [expandedProjects, setExpandedProjects] = useState({});
  const [selectedProject, setSelectedProject] = useState(null);
  const [showProjectModal, setShowProjectModal] = useState(false);
  const [showBoardModal, setShowBoardModal] = useState(false);
  const [modalType, setModalType] = useState(null);
  const [targetItem, setTargetItem] = useState(null);
  const [newTitle, setNewTitle] = useState('');

  const [dropdownData, setDropdownData] = useState(null); // { id, x, y, type }
  const dropdownRef = useRef(null);

  const createBoard = useCreateBoard();
  const createProject = useCreateProject();
  const { workspace } = useWorkspace();
  const { projects, loading, error } = useProjects();
  const { user } = useCurrentUser();
  const location = useLocation();

  const workspaceName = user?.username || '–ó–∞–≥—Ä—É–∑–∫–∞...';

  const [projectTitle, setProjectTitle] = useState('');
  const [boardTitle, setBoardTitle] = useState('');

  // === –ö–ª–∏–∫ –≤–Ω–µ –º–µ–Ω—é –∑–∞–∫—Ä—ã–≤–∞–µ—Ç –¥—Ä–æ–ø–¥–∞—É–Ω ===
  useEffect(() => {
    const handleClickOutside = (e) => {
      if (
        dropdownRef.current &&
        !dropdownRef.current.contains(e.target)
      ) {
        setDropdownData(null);
      }
    };
    document.addEventListener('mousedown', handleClickOutside);
    return () => document.removeEventListener('mousedown', handleClickOutside);
  }, []);

  const handleProjectClick = (project) => setSelectedProject(project);

  const handleCreateProject = (e) => {
    e.stopPropagation();
    setShowProjectModal(true);
  };

  const handleCreateBoard = (e) => {
    e.stopPropagation();
    if (!selectedProject) return;
    setShowBoardModal(true);
  };

  const handleProjectSubmit = async (e) => {
    e.preventDefault();
    if (!workspace) return alert('–†–∞–±–æ—á–µ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ');
    try {
      const newProject = await createProject.mutateAsync({
        title: projectTitle,
        workspaces_id: workspace.id,
      });
      console.log('–ü—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω:', newProject);
      setShowProjectModal(false);
      setProjectTitle('');
      window.location.reload();
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞:', err);
      alert('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ–µ–∫—Ç');
    }
  };

  const handleBoardSubmit = async (e) => {
    e.preventDefault();
    if (!selectedProject) return alert('–ü—Ä–æ–µ–∫—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω');
    try {
      const newBoard = await createBoard.mutateAsync({
        title: boardTitle,
        projects_id: selectedProject.id,
      });
      console.log('–î–æ—Å–∫–∞ —Å–æ–∑–¥–∞–Ω–∞:', newBoard);
      setShowBoardModal(false);
      setBoardTitle('');
      window.location.reload();
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–æ—Å–∫–∏:', err);
      alert('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –¥–æ—Å–∫—É');
    }
  };

  // === –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ –º–æ–¥–∞–ª–∫–∏ ===
  const openRenameModal = (item, type) => {
    setTargetItem(item);
    setNewTitle(item.title);
    setModalType(`rename-${type}`);
    setDropdownData(null);
  };

  const openDeleteModal = (item, type) => {
    setTargetItem(item);
    setModalType(`delete-${type}`);
    setDropdownData(null);
  };

  const closeModal = () => {
    setModalType(null);
    setTargetItem(null);
    setNewTitle('');
  };

  const handleRenameSubmit = (e) => {
    e.preventDefault();
    if (!newTitle.trim()) return;
    console.log('–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å', modalType, '–≤', newTitle);
    closeModal();
  };

  const handleDeleteConfirm = () => {
    console.log('–£–¥–∞–ª–∏—Ç—å', modalType, targetItem);
    closeModal();
  };

  const isBoardActive = (boardId) =>
    location.pathname.includes(`/boards/${boardId}`);

  // === –û—Ç–∫—Ä—ã—Ç–∏–µ –¥—Ä–æ–ø–¥–∞—É–Ω–∞ (—á–µ—Ä–µ–∑ –ø–æ—Ä—Ç–∞–ª) ===
  const openDropdown = (e, id, type) => {
    const rect = e.currentTarget.getBoundingClientRect();
    setDropdownData({
      id,
      type,
      x: rect.left,
      y: rect.bottom + 4, // —á—É—Ç—å –Ω–∏–∂–µ –∫–Ω–æ–ø–∫–∏
    });
  };

  // === –ö–æ–Ω—Ç–µ–Ω—Ç –¥—Ä–æ–ø–¥–∞—É–Ω–∞ ===
  const dropdownMenu =
    dropdownData &&
    createPortal(
      <div
        ref={dropdownRef}
        className="dropdown-menu"
        style={{
          position: 'absolute',
          top: dropdownData.y,
          left: dropdownData.x,
        }}
      >
        <button
          onClick={() =>
            openRenameModal(
              dropdownData.type === 'project'
                ? projects.find((p) => p.id === dropdownData.id)
                : selectedProject.boards.find((b) => b.id === dropdownData.id),
              dropdownData.type
            )
          }
        >
          –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å
        </button>
        <button
          onClick={() =>
            openDeleteModal(
              dropdownData.type === 'project'
                ? projects.find((p) => p.id === dropdownData.id)
                : selectedProject.boards.find((b) => b.id === dropdownData.id),
              dropdownData.type
            )
          }
        >
          –£–¥–∞–ª–∏—Ç—å
        </button>
      </div>,
      document.body
    );

  if (loading) return <div className="sidebar">–ó–∞–≥—Ä—É–∑–∫–∞...</div>;
  if (error)
    return (
      <div className="sidebar">
        –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–µ–∫—Ç–æ–≤: {error.message || JSON.stringify(error)}
      </div>
    );

  if (isCollapsed) {
    return (
      <div className="sidebar collapsed">
        <div className="sidebar-header">
          <button className="toggle-btn" onClick={onToggle}>
            ‚ò∞
          </button>
        </div>
        <div className="sidebar-content">
          <div className="workspace-icon">
            <span title={workspaceName}>üè¢</span>
          </div>
        </div>
      </div>
    );
  }

  return (
    <>
      <div className="sidebar">
        <div className="sidebar-header">
          <div className="workspace-info">
            <h3>{workspaceName}</h3>
          </div>
          <button className="toggle-btn" onClick={onToggle}>
            ‚óÄ
          </button>
        </div>

        <div className="sidebar-content">
          <div className="sidebar-sections">
            {/* === –ü–†–û–ï–ö–¢–´ === */}
            <div className="section">
              <div className="section-header">
                <h4 className="section-title">–ü–†–û–ï–ö–¢–´</h4>
                <button
                  className="create-btn"
                  onClick={handleCreateProject}
                  title="–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–µ–∫—Ç"
                >
                  +
                </button>
              </div>

              {projects.map((project) => (
                <div key={project.id} className="project-item">
                  <div
                    className={`project-header ${
                      selectedProject?.id === project.id ? 'selected' : ''
                    }`}
                    onClick={() => handleProjectClick(project)}
                  >
                    <span className="project-icon">üìÅ</span>
                    <span className="project-name">{project.title}</span>

                    <div
                      className="menu-wrapper"
                      onClick={(e) => e.stopPropagation()}
                    >
                      <button
                        className="menu-button"
                        onClick={(e) => openDropdown(e, project.id, 'project')}
                      >
                        ‚ãÆ
                      </button>
                    </div>
                  </div>
                </div>
              ))}
            </div>

            {/* === –î–û–°–ö–ò === */}
            {selectedProject && (
              <div className="section">
                <div className="section-header">
                  <div className="boards-header">
                    <h4 className="section-title">–î–û–°–ö–ò</h4>
                    <span className="selected-project-name">
                      {selectedProject.title}
                    </span>
                  </div>
                  <button
                    className="create-btn"
                    onClick={handleCreateBoard}
                    title="–°–æ–∑–¥–∞—Ç—å –¥–æ—Å–∫—É"
                  >
                    +
                  </button>
                </div>

                <div className="boards-list">
                  {selectedProject.boards?.map((board) => (
                    <div key={board.id} className="board-item">
                      <div
                        className={`board-link-wrapper ${
                          isBoardActive(board.id) ? 'active' : ''
                        }`}
                      >
                        <Link
                          to={`/${user.username}/project/${selectedProject.id}/board/${board.id}`}
                          className="board-link"
                        >
                          <span className="board-icon">üìã</span>
                          <span className="board-name">{board.title}</span>
                        </Link>

                        <div
                          className="menu-wrapper"
                          onClick={(e) => e.stopPropagation()}
                        >
                          <button
                            className="menu-button"
                            onClick={(e) => openDropdown(e, board.id, 'board')}
                          >
                            ‚ãÆ
                          </button>
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            )}
          </div>
        </div>

        {/* === –û–ë–©–ï–ï === */}
        <div className="general-section-bottom">
          <h4 className="section-title">–û–ë–©–ï–ï</h4>
          <div className="general-item">–î–∞—à–±–æ—Ä–¥</div>
          <div className="general-item">–ü–æ–∏—Å–∫ –∑–∞–¥–∞—á</div>
        </div>
      </div>

      {/* === –î—Ä–æ–ø–¥–∞—É–Ω —á–µ—Ä–µ–∑ Portal === */}
      {dropdownMenu}

      {/* === –ú–û–î–ê–õ–ö–ê: –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ === */}
      {showProjectModal && (
        <div className="modal-overlay" onClick={() => setShowProjectModal(false)}>
          <div className="modal-window" onClick={(e) => e.stopPropagation()}>
            <h3>–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–µ–∫—Ç</h3>
            <form onSubmit={handleProjectSubmit}>
              <input
                type="text"
                placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞"
                value={projectTitle}
                onChange={(e) => setProjectTitle(e.target.value)}
                required
              />
              <div className="modal-actions">
                <button type="button" onClick={() => setShowProjectModal(false)}>
                  –û—Ç–º–µ–Ω–∞
                </button>
                <button type="submit">–°–æ–∑–¥–∞—Ç—å</button>
              </div>
            </form>
          </div>
        </div>
      )}

      {/* === –ú–û–î–ê–õ–ö–ê: –°–æ–∑–¥–∞–Ω–∏–µ –¥–æ—Å–∫–∏ === */}
      {showBoardModal && (
        <div className="modal-overlay" onClick={() => setShowBoardModal(false)}>
          <div className="modal-window" onClick={(e) => e.stopPropagation()}>
            <h3>–°–æ–∑–¥–∞—Ç—å –¥–æ—Å–∫—É</h3>
            <form onSubmit={handleBoardSubmit}>
              <input
                type="text"
                placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ—Å–∫–∏"
                value={boardTitle}
                onChange={(e) => setBoardTitle(e.target.value)}
                required
              />
              <div className="modal-actions">
                <button type="button" onClick={() => setShowBoardModal(false)}>
                  –û—Ç–º–µ–Ω–∞
                </button>
                <button type="submit">–°–æ–∑–¥–∞—Ç—å</button>
              </div>
            </form>
          </div>
        </div>
      )}

      {/* === –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –º–æ–¥–∞–ª–∫–∞ (–ø–µ—Ä–µ–∏–º–µ–Ω/—É–¥–∞–ª–µ–Ω–∏–µ) === */}
      {modalType && (
        <div className="modal-overlay" onClick={closeModal}>
          <div className="modal-window" onClick={(e) => e.stopPropagation()}>
            {modalType.startsWith('rename') ? (
              <>
                <h3>
                  {modalType.includes('project')
                    ? '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞'
                    : '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å–∫–∏'}
                </h3>
                <form onSubmit={handleRenameSubmit}>
                  <label>
                    –ù–∞–∑–≤–∞–Ω–∏–µ {modalType.includes('project') ? '–ø—Ä–æ–µ–∫—Ç–∞' : '–¥–æ—Å–∫–∏'}
                  </label>
                  <input
                    type="text"
                    value={newTitle}
                    onChange={(e) => setNewTitle(e.target.value)}
                    placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ"
                    required
                  />
                  <div className="modal-actions">
                    <button type="button" onClick={closeModal}>
                      –û—Ç–º–µ–Ω–∞
                    </button>
                    <button type="submit">–°–æ—Ö—Ä–∞–Ω–∏—Ç—å</button>
                  </div>
                </form>
              </>
            ) : (
              <>
                <h3>
                  {modalType.includes('project')
                    ? '–£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞'
                    : '–£–¥–∞–ª–µ–Ω–∏–µ –¥–æ—Å–∫–∏'}
                </h3>
                <p>
                  –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å{' '}
                  {modalType.includes('project') ? '–ø—Ä–æ–µ–∫—Ç' : '–¥–æ—Å–∫—É'}{' '}
                  <strong>"{targetItem?.title}"</strong>?
                </p>
                <div className="modal-actions">
                  <button type="button" onClick={closeModal}>
                    –û—Ç–º–µ–Ω–∞
                  </button>
                  <button
                    type="button"
                    onClick={handleDeleteConfirm}
                    style={{ background: '#ef4444', color: 'white' }}
                  >
                    –£–¥–∞–ª–∏—Ç—å
                  </button>
                </div>
              </>
            )}
          </div>
        </div>
      )}
    </>
  );
}
